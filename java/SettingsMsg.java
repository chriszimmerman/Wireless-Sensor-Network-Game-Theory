// This file has been modified by Chris Zimmerman.
// This file, along with the other original AntiTheft application code
// can be found at tinyos.net 

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'SettingsMsg'
 * message type.
 */

public class SettingsMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 8;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 54;

    /** Create a new SettingsMsg of size 8. */
    public SettingsMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new SettingsMsg of the given data_length. */
    public SettingsMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SettingsMsg with the given data_length
     * and base offset.
     */
    public SettingsMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SettingsMsg using the given byte array
     * as backing store.
     */
    public SettingsMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SettingsMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public SettingsMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SettingsMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public SettingsMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SettingsMsg embedded in the given message
     * at the given base offset.
     */
    public SettingsMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SettingsMsg embedded in the given message
     * at the given base offset and length.
     */
    public SettingsMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <SettingsMsg> \n";
      try {
        s += "  [alert=0x"+Long.toHexString(get_alert())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [detect=0x"+Long.toHexString(get_detect())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [checkInterval=0x"+Long.toHexString(get_checkInterval())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [targetId=0x"+Long.toHexString(get_targetId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [duration=0x"+Long.toHexString(get_duration())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: alert
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'alert' is signed (false).
     */
    public static boolean isSigned_alert() {
        return false;
    }

    /**
     * Return whether the field 'alert' is an array (false).
     */
    public static boolean isArray_alert() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'alert'
     */
    public static int offset_alert() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'alert'
     */
    public static int offsetBits_alert() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'alert'
     */
    public short get_alert() {
        return (short)getUIntBEElement(offsetBits_alert(), 8);
    }

    /**
     * Set the value of the field 'alert'
     */
    public void set_alert(short value) {
        setUIntBEElement(offsetBits_alert(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'alert'
     */
    public static int size_alert() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'alert'
     */
    public static int sizeBits_alert() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: detect
    //   Field type: short, unsigned
    //   Offset (bits): 8
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'detect' is signed (false).
     */
    public static boolean isSigned_detect() {
        return false;
    }

    /**
     * Return whether the field 'detect' is an array (false).
     */
    public static boolean isArray_detect() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'detect'
     */
    public static int offset_detect() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'detect'
     */
    public static int offsetBits_detect() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'detect'
     */
    public short get_detect() {
        return (short)getUIntBEElement(offsetBits_detect(), 8);
    }

    /**
     * Set the value of the field 'detect'
     */
    public void set_detect(short value) {
        setUIntBEElement(offsetBits_detect(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'detect'
     */
    public static int size_detect() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'detect'
     */
    public static int sizeBits_detect() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: checkInterval
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'checkInterval' is signed (false).
     */
    public static boolean isSigned_checkInterval() {
        return false;
    }

    /**
     * Return whether the field 'checkInterval' is an array (false).
     */
    public static boolean isArray_checkInterval() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'checkInterval'
     */
    public static int offset_checkInterval() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'checkInterval'
     */
    public static int offsetBits_checkInterval() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'checkInterval'
     */
    public int get_checkInterval() {
        return (int)getUIntBEElement(offsetBits_checkInterval(), 16);
    }

    /**
     * Set the value of the field 'checkInterval'
     */
    public void set_checkInterval(int value) {
        setUIntBEElement(offsetBits_checkInterval(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'checkInterval'
     */
    public static int size_checkInterval() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'checkInterval'
     */
    public static int sizeBits_checkInterval() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: targetId
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'targetId' is signed (false).
     */
    public static boolean isSigned_targetId() {
        return false;
    }

    /**
     * Return whether the field 'targetId' is an array (false).
     */
    public static boolean isArray_targetId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'targetId'
     */
    public static int offset_targetId() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'targetId'
     */
    public static int offsetBits_targetId() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'targetId'
     */
    public int get_targetId() {
        return (int)getUIntBEElement(offsetBits_targetId(), 16);
    }

    /**
     * Set the value of the field 'targetId'
     */
    public void set_targetId(int value) {
        setUIntBEElement(offsetBits_targetId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'targetId'
     */
    public static int size_targetId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'targetId'
     */
    public static int sizeBits_targetId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: duration
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'duration' is signed (false).
     */
    public static boolean isSigned_duration() {
        return false;
    }

    /**
     * Return whether the field 'duration' is an array (false).
     */
    public static boolean isArray_duration() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'duration'
     */
    public static int offset_duration() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'duration'
     */
    public static int offsetBits_duration() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'duration'
     */
    public int get_duration() {
        return (int)getUIntBEElement(offsetBits_duration(), 16);
    }

    /**
     * Set the value of the field 'duration'
     */
    public void set_duration(int value) {
        setUIntBEElement(offsetBits_duration(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'duration'
     */
    public static int size_duration() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'duration'
     */
    public static int sizeBits_duration() {
        return 16;
    }

}
