// This file has been modified by Chris Zimmerman.
// This file, along with the other original AntiTheft application code
// can be found at tinyos.net 

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'AlertMsg'
 * message type.
 */

public class AlertMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 20;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 22;

    /** Create a new AlertMsg of size 20. */
    public AlertMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new AlertMsg of the given data_length. */
    public AlertMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AlertMsg with the given data_length
     * and base offset.
     */
    public AlertMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AlertMsg using the given byte array
     * as backing store.
     */
    public AlertMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AlertMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public AlertMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AlertMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public AlertMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AlertMsg embedded in the given message
     * at the given base offset.
     */
    public AlertMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AlertMsg embedded in the given message
     * at the given base offset and length.
     */
    public AlertMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <AlertMsg> \n";
      try {
        s += "  [stolenId=0x"+Long.toHexString(get_stolenId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [voltageData=0x"+Long.toHexString(get_voltageData())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [packetId=0x"+Long.toHexString(get_packetId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [path1=0x"+Long.toHexString(get_path1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [path2=0x"+Long.toHexString(get_path2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [path3=0x"+Long.toHexString(get_path3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [path4=0x"+Long.toHexString(get_path4())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [path5=0x"+Long.toHexString(get_path5())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [path6=0x"+Long.toHexString(get_path6())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ignoredId=0x"+Long.toHexString(get_ignoredId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: stolenId
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'stolenId' is signed (false).
     */
    public static boolean isSigned_stolenId() {
        return false;
    }

    /**
     * Return whether the field 'stolenId' is an array (false).
     */
    public static boolean isArray_stolenId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'stolenId'
     */
    public static int offset_stolenId() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'stolenId'
     */
    public static int offsetBits_stolenId() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'stolenId'
     */
    public int get_stolenId() {
        return (int)getUIntBEElement(offsetBits_stolenId(), 16);
    }

    /**
     * Set the value of the field 'stolenId'
     */
    public void set_stolenId(int value) {
        setUIntBEElement(offsetBits_stolenId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'stolenId'
     */
    public static int size_stolenId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'stolenId'
     */
    public static int sizeBits_stolenId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: voltageData
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'voltageData' is signed (false).
     */
    public static boolean isSigned_voltageData() {
        return false;
    }

    /**
     * Return whether the field 'voltageData' is an array (false).
     */
    public static boolean isArray_voltageData() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'voltageData'
     */
    public static int offset_voltageData() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'voltageData'
     */
    public static int offsetBits_voltageData() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'voltageData'
     */
    public int get_voltageData() {
        return (int)getUIntBEElement(offsetBits_voltageData(), 16);
    }

    /**
     * Set the value of the field 'voltageData'
     */
    public void set_voltageData(int value) {
        setUIntBEElement(offsetBits_voltageData(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'voltageData'
     */
    public static int size_voltageData() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'voltageData'
     */
    public static int sizeBits_voltageData() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: packetId
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'packetId' is signed (false).
     */
    public static boolean isSigned_packetId() {
        return false;
    }

    /**
     * Return whether the field 'packetId' is an array (false).
     */
    public static boolean isArray_packetId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'packetId'
     */
    public static int offset_packetId() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'packetId'
     */
    public static int offsetBits_packetId() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'packetId'
     */
    public int get_packetId() {
        return (int)getUIntBEElement(offsetBits_packetId(), 16);
    }

    /**
     * Set the value of the field 'packetId'
     */
    public void set_packetId(int value) {
        setUIntBEElement(offsetBits_packetId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'packetId'
     */
    public static int size_packetId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'packetId'
     */
    public static int sizeBits_packetId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: path1
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'path1' is signed (false).
     */
    public static boolean isSigned_path1() {
        return false;
    }

    /**
     * Return whether the field 'path1' is an array (false).
     */
    public static boolean isArray_path1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'path1'
     */
    public static int offset_path1() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'path1'
     */
    public static int offsetBits_path1() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'path1'
     */
    public int get_path1() {
        return (int)getUIntBEElement(offsetBits_path1(), 16);
    }

    /**
     * Set the value of the field 'path1'
     */
    public void set_path1(int value) {
        setUIntBEElement(offsetBits_path1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'path1'
     */
    public static int size_path1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'path1'
     */
    public static int sizeBits_path1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: path2
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'path2' is signed (false).
     */
    public static boolean isSigned_path2() {
        return false;
    }

    /**
     * Return whether the field 'path2' is an array (false).
     */
    public static boolean isArray_path2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'path2'
     */
    public static int offset_path2() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'path2'
     */
    public static int offsetBits_path2() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'path2'
     */
    public int get_path2() {
        return (int)getUIntBEElement(offsetBits_path2(), 16);
    }

    /**
     * Set the value of the field 'path2'
     */
    public void set_path2(int value) {
        setUIntBEElement(offsetBits_path2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'path2'
     */
    public static int size_path2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'path2'
     */
    public static int sizeBits_path2() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: path3
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'path3' is signed (false).
     */
    public static boolean isSigned_path3() {
        return false;
    }

    /**
     * Return whether the field 'path3' is an array (false).
     */
    public static boolean isArray_path3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'path3'
     */
    public static int offset_path3() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'path3'
     */
    public static int offsetBits_path3() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'path3'
     */
    public int get_path3() {
        return (int)getUIntBEElement(offsetBits_path3(), 16);
    }

    /**
     * Set the value of the field 'path3'
     */
    public void set_path3(int value) {
        setUIntBEElement(offsetBits_path3(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'path3'
     */
    public static int size_path3() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'path3'
     */
    public static int sizeBits_path3() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: path4
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'path4' is signed (false).
     */
    public static boolean isSigned_path4() {
        return false;
    }

    /**
     * Return whether the field 'path4' is an array (false).
     */
    public static boolean isArray_path4() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'path4'
     */
    public static int offset_path4() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'path4'
     */
    public static int offsetBits_path4() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'path4'
     */
    public int get_path4() {
        return (int)getUIntBEElement(offsetBits_path4(), 16);
    }

    /**
     * Set the value of the field 'path4'
     */
    public void set_path4(int value) {
        setUIntBEElement(offsetBits_path4(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'path4'
     */
    public static int size_path4() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'path4'
     */
    public static int sizeBits_path4() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: path5
    //   Field type: int, unsigned
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'path5' is signed (false).
     */
    public static boolean isSigned_path5() {
        return false;
    }

    /**
     * Return whether the field 'path5' is an array (false).
     */
    public static boolean isArray_path5() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'path5'
     */
    public static int offset_path5() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'path5'
     */
    public static int offsetBits_path5() {
        return 112;
    }

    /**
     * Return the value (as a int) of the field 'path5'
     */
    public int get_path5() {
        return (int)getUIntBEElement(offsetBits_path5(), 16);
    }

    /**
     * Set the value of the field 'path5'
     */
    public void set_path5(int value) {
        setUIntBEElement(offsetBits_path5(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'path5'
     */
    public static int size_path5() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'path5'
     */
    public static int sizeBits_path5() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: path6
    //   Field type: int, unsigned
    //   Offset (bits): 128
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'path6' is signed (false).
     */
    public static boolean isSigned_path6() {
        return false;
    }

    /**
     * Return whether the field 'path6' is an array (false).
     */
    public static boolean isArray_path6() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'path6'
     */
    public static int offset_path6() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'path6'
     */
    public static int offsetBits_path6() {
        return 128;
    }

    /**
     * Return the value (as a int) of the field 'path6'
     */
    public int get_path6() {
        return (int)getUIntBEElement(offsetBits_path6(), 16);
    }

    /**
     * Set the value of the field 'path6'
     */
    public void set_path6(int value) {
        setUIntBEElement(offsetBits_path6(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'path6'
     */
    public static int size_path6() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'path6'
     */
    public static int sizeBits_path6() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ignoredId
    //   Field type: int, unsigned
    //   Offset (bits): 144
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ignoredId' is signed (false).
     */
    public static boolean isSigned_ignoredId() {
        return false;
    }

    /**
     * Return whether the field 'ignoredId' is an array (false).
     */
    public static boolean isArray_ignoredId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ignoredId'
     */
    public static int offset_ignoredId() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ignoredId'
     */
    public static int offsetBits_ignoredId() {
        return 144;
    }

    /**
     * Return the value (as a int) of the field 'ignoredId'
     */
    public int get_ignoredId() {
        return (int)getUIntBEElement(offsetBits_ignoredId(), 16);
    }

    /**
     * Set the value of the field 'ignoredId'
     */
    public void set_ignoredId(int value) {
        setUIntBEElement(offsetBits_ignoredId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'ignoredId'
     */
    public static int size_ignoredId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ignoredId'
     */
    public static int sizeBits_ignoredId() {
        return 16;
    }

}
